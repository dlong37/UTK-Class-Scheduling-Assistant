Support.h:
d77bb731 (Gian 2024-10-16 21:01:14 -0400  1) #ifndef SUPPORT_H
d77bb731 (Gian 2024-10-16 21:01:14 -0400  2) #define SUPPORT_H
d77bb731 (Gian 2024-10-16 21:01:14 -0400 52) void calc_distance(vector<vector<float> > &distance_vector);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 53) void print_error(string r, string s, int i);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 54) int read_file(ifstream &file, vector<course> &course_vector);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 55) void expand_vector(vector<string> &taken_vector, vector<course> &course_vector);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 56) void remove_duplicates(set<string> &taken_set, vector<string> &taken_vector, vector<string> &major_vector);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 57) int open_file(string file_name, ifstream &file, string args);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 58) void read_file2(vector<string> &vector, ifstream &file);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 59) int error_check(string s, int argc, int i);
a5b39689 (Gian 2024-10-16 21:55:19 -0400 60) void optimize_loc(vector<string> major_vector, vector<vector<float>> distance_vector, string s, int hours);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 61) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 62) #endif

Support.cpp:
d77bb731 (Gian 2024-10-16 21:01:14 -0400  13) vector<pair<double, double>> coordinates = { APBcoord, AYRcoord, BECcoord, BEOcoord, DOUcoord, HBBcoord, HPRcoord, HSScoord, JHBcoord, LIBcoord, MKBcoord, MOScoord, PERcoord, PHYcoord, SRFcoord, STRcoord, TICcoord, WABcoord, ZECcoord };
d77bb731 (Gian 2024-10-16 21:01:14 -0400  14) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400  15) void calc_distance(vector<vector<float> > &distance_vector) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400  16)     distance_vector.resize(19);
d77bb731 (Gian 2024-10-16 21:01:14 -0400  17)     for(int i = 0; i < 19; i++) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400  18)         distance_vector[i].resize(19);
d77bb731 (Gian 2024-10-16 21:01:14 -0400  19)     }
d77bb731 (Gian 2024-10-16 21:01:14 -0400  20) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400  21)     for(int i = 0; i < 19; i++) {
aa8563ea (Gian 2024-10-17 14:49:24 -0400  22)         for(int j = 0; j <= i; j++) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400  23)             float la1 = coordinates[i].first*(M_PI/180.0);
d77bb731 (Gian 2024-10-16 21:01:14 -0400  24)             float la2 = coordinates[j].first*(M_PI/180.0);
d77bb731 (Gian 2024-10-16 21:01:14 -0400  25)             float lo1 = coordinates[i].second*(M_PI/180.0);
d77bb731 (Gian 2024-10-16 21:01:14 -0400  26)             float lo2 = coordinates[j].second*(M_PI/180.0);
d77bb731 (Gian 2024-10-16 21:01:14 -0400  27)             float temp1 = ((la2 - la1)/2);
d77bb731 (Gian 2024-10-16 21:01:14 -0400  28)             float temp2 = ((lo2 - lo1)/2);
d77bb731 (Gian 2024-10-16 21:01:14 -0400  29) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400  30)             float temp3 = (sin(temp1))*(sin(temp1));
d77bb731 (Gian 2024-10-16 21:01:14 -0400  31)             float temp4 = cos(la1);
d77bb731 (Gian 2024-10-16 21:01:14 -0400  32)             float temp5 = cos(la2);
d77bb731 (Gian 2024-10-16 21:01:14 -0400  33)             float temp6 = (sin(temp2))*(sin(temp2));
d77bb731 (Gian 2024-10-16 21:01:14 -0400  34) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400  35)             float temp7 = temp3 + (temp4*temp5*temp6);
d77bb731 (Gian 2024-10-16 21:01:14 -0400  36) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400  37)             float temp8 = sqrt(temp7);
d77bb731 (Gian 2024-10-16 21:01:14 -0400  38) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400  39)             float distance = 2*(3963.0)*(asin(temp8));
d77bb731 (Gian 2024-10-16 21:01:14 -0400  40) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400  41)             distance = 0.001*round(distance/0.001);
d77bb731 (Gian 2024-10-16 21:01:14 -0400  42) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400  43)             distance_vector[i][j] = distance;
d77bb731 (Gian 2024-10-16 21:01:14 -0400  44)         }
d77bb731 (Gian 2024-10-16 21:01:14 -0400  45)     }
d77bb731 (Gian 2024-10-16 21:01:14 -0400  46) }
d77bb731 (Gian 2024-10-16 21:01:14 -0400  47) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400  48) void print_error(string r, string s, int i) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400  49)     ofstream ferr("error.txt");
d77bb731 (Gian 2024-10-16 21:01:14 -0400  50)     if(i == 1) { ferr << "error: cannot open " << s << endl; }
d77bb731 (Gian 2024-10-16 21:01:14 -0400  51)     ferr << "usage: " << r << " available_courses_file.csv major_courses_file.csv taken_courses_file.csv" << endl;
d77bb731 (Gian 2024-10-16 21:01:14 -0400  52)     ferr.close();
d77bb731 (Gian 2024-10-16 21:01:14 -0400  53) }
d77bb731 (Gian 2024-10-16 21:01:14 -0400  54) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400  55) int read_file(ifstream &file, vector<course> &course_vector) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 117)     return 0;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 118) }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 119) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 120) void expand_vector(vector<string> &taken_vector, vector<course> &course_vector) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 142) }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 143) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 144) void remove_duplicates(set<string> &taken_set, vector<string> &taken_vector, vector<string> &major_vector) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 161)     for(int i = 0; i < major_vector.size(); i++) {
a5b39689 (Gian 2024-10-16 21:55:19 -0400 162)         for(set<string>::iterator it = taken_set.begin(); it != taken_set.end(); ++it) {
a5b39689 (Gian 2024-10-16 21:55:19 -0400 163)             if(major_vector[i] == *it) {
a5b39689 (Gian 2024-10-16 21:55:19 -0400 164)                 major_vector.erase(major_vector.begin()+i);
a5b39689 (Gian 2024-10-16 21:55:19 -0400 165)                 i--;
a5b39689 (Gian 2024-10-16 21:55:19 -0400 166)                 break;
a5b39689 (Gian 2024-10-16 21:55:19 -0400 167)             }
a5b39689 (Gian 2024-10-16 21:55:19 -0400 168)         }   
d77bb731 (Gian 2024-10-16 21:01:14 -0400 169)     }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 170) }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 171) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 172) int open_file(string file_name, ifstream &file, string args) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 173)     file.open(file_name);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 174)     if(!file.is_open()) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 175)         print_error(args, file_name, 1);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 176)         return 1;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 177)     }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 178)     return 0;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 179) }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 180) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 181) void read_file2(vector<string> &vector, ifstream &file) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 182)     string line;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 183)     string course;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 184)     while(getline(file, line)) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 185)         course = line;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 186)         vector.push_back(course);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 187)     }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 188)     file.close();
d77bb731 (Gian 2024-10-16 21:01:14 -0400 189) }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 190) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 191) int error_check(string s, int argc, int i) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 192)     bool failed = false;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 193)     if(argc != i) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 194)         failed = true;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 195)     }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 196)     if(failed) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 197)         print_error(s, "no", 0);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 198)         return 1;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 199)     }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 200)     return 0;
a5b39689 (Gian 2024-10-16 21:55:19 -0400 201) }
a5b39689 (Gian 2024-10-16 21:55:19 -0400 202) 
a5b39689 (Gian 2024-10-16 21:55:19 -0400 203) void optimize_loc(vector<string> major_vector, vector<vector<float>> distance_vector, string s, int hours) {
a5b39689 (Gian 2024-10-16 21:55:19 -0400 204)     
d77bb731 (Gian 2024-10-16 21:01:14 -0400 205) }

loc.cpp:
d77bb731 (Gian 2024-10-16 21:01:14 -0400  1) #include "Support.h"
d77bb731 (Gian 2024-10-16 21:01:14 -0400  2) using namespace std;
d77bb731 (Gian 2024-10-16 21:01:14 -0400  3) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400  4) int main(int argc, char** argv) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400  5) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400  6)     // argument checking
d77bb731 (Gian 2024-10-16 21:01:14 -0400  7)     if(error_check(argv[0], argc, 4)) { return 1; }
d77bb731 (Gian 2024-10-16 21:01:14 -0400  8) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400  9)     // files streams
d77bb731 (Gian 2024-10-16 21:01:14 -0400 10)     ifstream file; 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 11) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 12)     // open the available_courses file and error check opening
d77bb731 (Gian 2024-10-16 21:01:14 -0400 13)     if(open_file(argv[1], file, argv[0])) { return 1; }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 14) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 15)     // make vector that can hold class type course
d77bb731 (Gian 2024-10-16 21:01:14 -0400 16)     vector<course> course_vector;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 17)     if(read_file(file, course_vector)) { return 1; }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 18) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 19)     // open the major_courses file and error check opening
d77bb731 (Gian 2024-10-16 21:01:14 -0400 20)     if(open_file(argv[2], file, argv[0])) { return 1; }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 21) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 22)     // reads from the major courses into a vector that holds the strings
d77bb731 (Gian 2024-10-16 21:01:14 -0400 23)     vector<string> major_vector;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 24)     read_file2(major_vector, file);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 25) 
a5b39689 (Gian 2024-10-16 21:55:19 -0400 26)     cout << "Major vector:" << endl; 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 27)     for(int i = 0; i < (int)major_vector.size(); i++) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 28)         cout << major_vector[i] << endl;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 29)     }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 30)     cout << endl;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 31) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 32)     // open the taken_courses file and error check opening
d77bb731 (Gian 2024-10-16 21:01:14 -0400 33)     if(open_file(argv[3], file, argv[0])) { return 1; }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 34) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 35)     // reads from the taken_courses file and saves them to a vector
d77bb731 (Gian 2024-10-16 21:01:14 -0400 36)     vector<string> taken_vector;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 37)     read_file2(taken_vector, file);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 38) 
a5b39689 (Gian 2024-10-16 21:55:19 -0400 39)     cout << "taken vector:" << endl;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 40)     for(int i = 0; i < (int)taken_vector.size(); i++) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 41)         cout << taken_vector[i] << endl;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 42)     }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 43)     cout << endl;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 44) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 45)     // expands the taken_courses vector to include all the pre reqs that are needed to get to a class in the taken_courses vector
d77bb731 (Gian 2024-10-16 21:01:14 -0400 46)     expand_vector(taken_vector, course_vector);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 47) 
a5b39689 (Gian 2024-10-16 21:55:19 -0400 48)     cout << "taken vector expanded:" << endl;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 49)     for(int i = 0; i < (int)taken_vector.size(); i++) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 50)         cout << taken_vector[i] << endl;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 51)     }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 52)     cout << endl;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 53) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 54)     // create a set so duplicates are removed and classes are sorted alphabetically
d77bb731 (Gian 2024-10-16 21:01:14 -0400 55)     set<string> taken_set;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 56)     remove_duplicates(taken_set, taken_vector, major_vector);
a5b39689 (Gian 2024-10-16 21:55:19 -0400 57)     cout << "taken set:" << endl;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 58)     for(set<string>::iterator it = taken_set.begin(); it != taken_set.end(); ++it) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 59)         cout << *it << std::endl;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 60)     }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 61)     cout << endl;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 62) 
d77bb731 (Gian 2024-10-16 21:01:14 -0400 63)     vector<vector<float>> distance_vector;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 64)     calc_distance(distance_vector);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 65) 
a5b39689 (Gian 2024-10-16 21:55:19 -0400 66)     cout << "distance vector:" << endl;
d77bb731 (Gian 2024-10-16 21:01:14 -0400 67)     for(int i = 0; i < 19; i++) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 68)         for(int j = 0; j < 19; j++) {
d77bb731 (Gian 2024-10-16 21:01:14 -0400 69)             printf("%f ", distance_vector[i][j]);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 70)         }
d77bb731 (Gian 2024-10-16 21:01:14 -0400 71)         printf("\n");
d77bb731 (Gian 2024-10-16 21:01:14 -0400 72)     }
a5b39689 (Gian 2024-10-16 21:55:19 -0400 73)     cout << endl;
a5b39689 (Gian 2024-10-16 21:55:19 -0400 74) 
a5b39689 (Gian 2024-10-16 21:55:19 -0400 75)     cout << "Major vector shrunk:" << endl;
a5b39689 (Gian 2024-10-16 21:55:19 -0400 76)     for(int i = 0; i < (int)major_vector.size(); i++) {
a5b39689 (Gian 2024-10-16 21:55:19 -0400 77)         cout << major_vector[i] << endl;
a5b39689 (Gian 2024-10-16 21:55:19 -0400 78)     }
a5b39689 (Gian 2024-10-16 21:55:19 -0400 79)     cout << endl;
a5b39689 (Gian 2024-10-16 21:55:19 -0400 80) 
a5b39689 (Gian 2024-10-16 21:55:19 -0400 81)     optimize_loc(major_vector, distance_vector, argv[1], 15);
d77bb731 (Gian 2024-10-16 21:01:14 -0400 82)     
d77bb731 (Gian 2024-10-16 21:01:14 -0400 83) }
