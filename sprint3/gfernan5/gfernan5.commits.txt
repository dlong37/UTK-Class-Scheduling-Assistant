Support.h:
b77d0162 (Gian            2024-10-25 13:36:42 -0400  1) #ifndef SUPPORT_H
b77d0162 (Gian            2024-10-25 13:36:42 -0400  2) #define SUPPORT_H
b77d0162 (Gian            2024-10-25 13:36:42 -0400  3) #include <iostream>
b77d0162 (Gian            2024-10-25 13:36:42 -0400  4) #include <string>
b77d0162 (Gian            2024-10-25 13:36:42 -0400  5) #include <iomanip>
b77d0162 (Gian            2024-10-25 13:36:42 -0400  6) #include <fstream>
b77d0162 (Gian            2024-10-25 13:36:42 -0400  7) #include <sstream>
b77d0162 (Gian            2024-10-25 13:36:42 -0400  8) #include <vector>
b77d0162 (Gian            2024-10-25 13:36:42 -0400 10) #include <cmath>
b77d0162 (Gian            2024-10-25 13:36:42 -0400 11) #include <set>
b77d0162 (Gian            2024-10-25 13:36:42 -0400 12) #include <utility>
b77d0162 (Gian            2024-10-25 13:36:42 -0400 13) using namespace std;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 14) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 15) class course {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 16)     public:
b77d0162 (Gian            2024-10-25 13:36:42 -0400 17)         string abbrv;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 18)         int num;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 19)         string title;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 20)         int hours;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 21)         string attributes;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 22)         string pre_req;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 23)         string co_req;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 24)         string lec_time;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 25)         string lec_date;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 26)         string lec_loc;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 27)         string lab_time;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 28)         string lab_date;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 29)         string lab_loc;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 31)         bool operator==(course rhs);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 38) };
b77d0162 (Gian            2024-10-25 13:36:42 -0400 39) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 40) // coordinates for class locations
b77d0162 (Gian            2024-10-25 13:36:42 -0400 41) const pair<double, double> APBcoord(35.95716565313402, -83.92699933505531);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 42) const pair<double, double> AYRcoord(35.95743065274119, -83.92592513641416);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 43) const pair<double, double> BECcoord(35.954316260640674, -83.92782712008297);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 44) const pair<double, double> BEOcoord(35.9481784481985, -83.94013149194797);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 45) const pair<double, double> DOUcoord(35.95775693538045, -83.92407556241893);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 46) const pair<double, double> HBBcoord(35.95573323240885, -83.928646419472);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 47) const pair<double, double> HPRcoord(35.95188743870127, -83.93253301808525);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 48) const pair<double, double> HSScoord(35.953522436651596, -83.92881407748088);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 49) const pair<double, double> JHBcoord(35.95919575620802, -83.92617622801401);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 50) const pair<double, double> LIBcoord(35.95511512399242, -83.92976548040959);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 51) const pair<double, double> MKBcoord(35.95863732223823, -83.92463257032564);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 52) const pair<double, double> MOScoord(35.9588754345924, -83.92702442104134);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 53) const pair<double, double> PERcoord(35.95668833001991, -83.92406905123228);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 54) const pair<double, double> PHYcoord(35.95656376894459, -83.92551827131747);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 55) const pair<double, double> SRFcoord(35.95730762715489, -83.92475009354663);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 56) const pair<double, double> STRcoord(35.95768764248766, -83.93108382310751);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 57) const pair<double, double> TICcoord(35.95577153518418, -83.9226653536677);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 58) const pair<double, double> WABcoord(35.95693990352076, -83.92768208583665);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 59) const pair<double, double> ZECcoord(35.95569385908873, -83.92376342399506);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 60) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 61) void calc_distance(vector<vector<float> > &distance_vector);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 62) void print_error(string r, string s, int i);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 63) int read_file(ifstream &file, vector<course> &course_vector);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 64) void expand_vector(vector<string> &taken_vector, vector<course> &course_vector);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 65) void remove_duplicates(set<string> &taken_set, vector<string> &taken_vector, vector<string> &major_vector);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 66) int open_file(string file_name, ifstream &file, string args);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 67) void read_file2(vector<string> &vector, ifstream &file);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 68) int error_check(string s, int argc, int i);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 69) void find_next_courses(vector<string> &needed, vector<course> course_vector, set<string> taken_set, vector<string> major_vector, vector<vector<float> > distance_vector, string s, int hours);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 70) bool get_prereqs(course c, vector<vector<string> > &temppre);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 71) bool check_prereqs(set<string> taken_set, vector<vector<string> > temppre);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 72) int get_flag(string s);
da46a7cf (Gian            2024-10-28 00:36:19 -0400 73) int schedule_next_courses(vector<course> &next_courses, vector<string> &needed, vector<course> &course_vector);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 84) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 85) #endif

Support.cpp:
b77d0162 (Gian            2024-10-25 13:36:42 -0400   1) #include <iostream>
b77d0162 (Gian            2024-10-25 13:36:42 -0400   2) #include <string>
b77d0162 (Gian            2024-10-25 13:36:42 -0400   3) #include <iomanip>
b77d0162 (Gian            2024-10-25 13:36:42 -0400   4) #include <fstream>
b77d0162 (Gian            2024-10-25 13:36:42 -0400   5) #include <sstream>
b77d0162 (Gian            2024-10-25 13:36:42 -0400   6) #include <vector>
b77d0162 (Gian            2024-10-25 13:36:42 -0400   8) #include <cmath>
b77d0162 (Gian            2024-10-25 13:36:42 -0400   9) #include <set>
da46a7cf (Gian            2024-10-28 00:36:19 -0400  10) #include <algorithm>
b77d0162 (Gian            2024-10-25 13:36:42 -0400  11) #include <utility>
b77d0162 (Gian            2024-10-25 13:36:42 -0400  12) #include <time.h>
b77d0162 (Gian            2024-10-25 13:36:42 -0400  13) #include <stdlib.h>
b77d0162 (Gian            2024-10-25 13:36:42 -0400  14) #include "Support.h"
b77d0162 (Gian            2024-10-25 13:36:42 -0400  16) using namespace std;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  17) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  18) vector<pair<double, double> > coordinates = { APBcoord, AYRcoord, BECcoord, BEOcoord, DOUcoord, HBBcoord, HPRcoord, HSScoord, JHBcoord, LIBcoord, MKBcoord, MOScoord, PERcoord, PHYcoord, SRFcoord, STRcoord, TICcoord, WABcoord, ZECcoord };
b77d0162 (Gian            2024-10-25 13:36:42 -0400  19) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  20) void calc_distance(vector<vector<float> > &distance_vector) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400  21)     distance_vector.resize(19);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  22)     for(int i = 0; i < 19; i++) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400  23)         distance_vector[i].resize(19);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  24)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400  25) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  26)     for(int i = 0; i < 19; i++) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400  27)         for(int j = 0; j < 19; j++) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400  28)             float la1 = coordinates[i].first*(M_PI/180.0);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  29)             float la2 = coordinates[j].first*(M_PI/180.0);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  30)             float lo1 = coordinates[i].second*(M_PI/180.0);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  31)             float lo2 = coordinates[j].second*(M_PI/180.0);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  32)             float temp1 = ((la2 - la1)/2);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  33)             float temp2 = ((lo2 - lo1)/2);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  34) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  35)             float temp3 = (sin(temp1))*(sin(temp1));
b77d0162 (Gian            2024-10-25 13:36:42 -0400  36)             float temp4 = cos(la1);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  37)             float temp5 = cos(la2);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  38)             float temp6 = (sin(temp2))*(sin(temp2));
b77d0162 (Gian            2024-10-25 13:36:42 -0400  39) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  40)             float temp7 = temp3 + (temp4*temp5*temp6);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  41) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  42)             float temp8 = sqrt(temp7);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  43) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  44)             float distance = 2*(3963.0)*(asin(temp8));
b77d0162 (Gian            2024-10-25 13:36:42 -0400  45) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  46)             distance = 0.001*round(distance/0.001);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  47) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  48)             distance_vector[i][j] = distance;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  49)         }
b77d0162 (Gian            2024-10-25 13:36:42 -0400  50)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400  51) }
b77d0162 (Gian            2024-10-25 13:36:42 -0400  52) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  53) void print_error(string r, string s, int i) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400  54)     ofstream ferr("error.txt");
b77d0162 (Gian            2024-10-25 13:36:42 -0400  55)     if(i == 1) { ferr << "error: cannot open " << s << endl; }
b77d0162 (Gian            2024-10-25 13:36:42 -0400  56)     ferr << "usage: " << r << " available_courses_file.csv major_courses_file.csv taken_courses_file.csv location|time" << endl;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  57)     ferr.close();
b77d0162 (Gian            2024-10-25 13:36:42 -0400  58) }
b77d0162 (Gian            2024-10-25 13:36:42 -0400  59) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  60) int read_file(ifstream &file, vector<course> &course_vector) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400  61)     course my_course;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  62)     string line;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  63)     getline(file, line);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  64)     while (getline(file, line)) { // get whole line
b77d0162 (Gian            2024-10-25 13:36:42 -0400  65)         int i = 0;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  66)         stringstream ss(line);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  67)         while (getline(ss, line, ',')) { // separate by commas
b77d0162 (Gian            2024-10-25 13:36:42 -0400  68)             // using i to keep track of the number of attributes we've read in,
b77d0162 (Gian            2024-10-25 13:36:42 -0400  69)             // switch to read into the right properties
b77d0162 (Gian            2024-10-25 13:36:42 -0400  70)             switch (i) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400  71)                 case(0):
b77d0162 (Gian            2024-10-25 13:36:42 -0400  72)                     my_course.abbrv = line;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  73)                     break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  74)                 case(1):
b77d0162 (Gian            2024-10-25 13:36:42 -0400  75)                     my_course.num = stoi(line);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  76)                     break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  77)                 case(2):
b77d0162 (Gian            2024-10-25 13:36:42 -0400  78)                     my_course.title = line;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  79)                     break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  80)                 case(3):
b77d0162 (Gian            2024-10-25 13:36:42 -0400  81)                     my_course.hours = stoi(line);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  82)                     break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  83)                 case(4):
b77d0162 (Gian            2024-10-25 13:36:42 -0400  84)                     my_course.attributes = line;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  85)                     break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  86)                 case(5):
b77d0162 (Gian            2024-10-25 13:36:42 -0400  87)                     my_course.pre_req = line;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  88)                     break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  89)                 case(6):
b77d0162 (Gian            2024-10-25 13:36:42 -0400  90)                     my_course.co_req = line;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  91)                     break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  92)                 case(7):
b77d0162 (Gian            2024-10-25 13:36:42 -0400  93)                     my_course.lec_time = line;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  94)                     break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  95)                 case(8):
b77d0162 (Gian            2024-10-25 13:36:42 -0400  96)                     my_course.lec_date = line;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  97)                     break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  98)                 case(9):
b77d0162 (Gian            2024-10-25 13:36:42 -0400  99)                     my_course.lec_loc = line;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 100)                     break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 101)                 case(10):
b77d0162 (Gian            2024-10-25 13:36:42 -0400 102)                     my_course.lab_time = line;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 103)                     break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 104)                 case(11):
b77d0162 (Gian            2024-10-25 13:36:42 -0400 105)                     my_course.lab_date = line;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 106)                     break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 107)                 case(12):
b77d0162 (Gian            2024-10-25 13:36:42 -0400 108)                     my_course.lab_loc = line;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 109)                     break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 110)                 default:
b77d0162 (Gian            2024-10-25 13:36:42 -0400 111)                     cout << "error" << endl;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 112)                     return 1;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 113)             }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 114)             i++; 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 115)             if (i == 13) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 116)                 course_vector.push_back(my_course);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 117)                 i = 0;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 118)             }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 119)         }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 120)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 121)     file.close();
b77d0162 (Gian            2024-10-25 13:36:42 -0400 122)     return 0;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 123) }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 124) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 125) void expand_vector(vector<string> &taken_vector, vector<course> &course_vector) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 126)     for(int i = 0; i < taken_vector.size(); i++) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 127)         string c = "";
b77d0162 (Gian            2024-10-25 13:36:42 -0400 128)         for(int j = 0; j < course_vector.size(); j++) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 129)             c = course_vector[j].abbrv + " " + to_string(course_vector[j].num);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 130)             if(c == taken_vector[i]) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 131)                 string cc = course_vector[j].pre_req;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 132)                 string ccc = "";
b77d0162 (Gian            2024-10-25 13:36:42 -0400 133)                 for(int k = 0; k < cc.size(); k++) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 134)                     if(cc[k] == '&' || cc[k] == '|') {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 135)                         taken_vector.push_back(ccc);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 136)                         ccc.clear();
b77d0162 (Gian            2024-10-25 13:36:42 -0400 137)                     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 138)                     if(cc[k] != '&' && cc[k] != '|') {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 139)                         ccc.push_back(cc[k]);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 140)                     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 141)                 }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 142)                 taken_vector.push_back(ccc);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 143)                 break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 144)             }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 145)         }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 146)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 147) }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 148) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 149) void remove_duplicates(set<string> &taken_set, vector<string> &taken_vector, vector<string> &major_vector) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 150)     for(int i = 0; i < taken_vector.size(); i++) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 151)         taken_set.insert(taken_vector[i]);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 152)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 153) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 154)     // print inside the set
b77d0162 (Gian            2024-10-25 13:36:42 -0400 155)     set<string>::iterator it = taken_set.begin();
b77d0162 (Gian            2024-10-25 13:36:42 -0400 156)     while (it != taken_set.end()) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 157)         if (*it == "none") {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 158)             it = taken_set.erase(it);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 159)         } 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 160)         else {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 161)             ++it;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 162)         }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 163)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 164) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 165)     for(int i = 0; i < major_vector.size(); i++) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 166)         for(set<string>::iterator it = taken_set.begin(); it != taken_set.end(); ++it) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 167)             if(major_vector[i] == *it) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 168)                 major_vector.erase(major_vector.begin()+i);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 169)                 i--;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 170)                 break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 171)             }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 172)         }   
b77d0162 (Gian            2024-10-25 13:36:42 -0400 173)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 174) }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 175) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 176) int open_file(string file_name, ifstream &file, string args) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 177)     file.open(file_name);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 178)     if(!file.is_open()) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 179)         print_error(args, file_name, 1);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 180)         return 1;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 181)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 182)     return 0;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 183) }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 184) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 185) void read_file2(vector<string> &vector, ifstream &file) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 186)     string line;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 187)     string course;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 188)     while(getline(file, line)) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 189)         course = line;
5e55dc03 (Gian            2024-10-29 11:48:05 -0400 190)         if(line != "\n") {
5e55dc03 (Gian            2024-10-29 11:48:05 -0400 191)             vector.push_back(course);
5e55dc03 (Gian            2024-10-29 11:48:05 -0400 192)         }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 193)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 194)     file.close();
b77d0162 (Gian            2024-10-25 13:36:42 -0400 195) }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 196) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 197) int error_check(string s, int argc, int i) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 198)     bool failed = false;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 199)     if(argc != i) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 200)         failed = true;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 201)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 202)     if(failed) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 203)         print_error(s, "no", 0);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 204)         return 1;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 205)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 206)     return 0;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 207) }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 208) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 209) void find_next_courses(vector<string> &needed, vector<course> course_vector, set<string> taken_set, vector<string> major_vector, vector<vector<float> > distance_vector, string s, int hours) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 210)     int t = 0;
26ba1c38 (Gian            2024-10-29 11:12:38 -0400 211)     srand(time(NULL));
b77d0162 (Gian            2024-10-25 13:36:42 -0400 212)     while(t < hours) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 213)         if(major_vector.size() == 0) { break; }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 214)         int i = rand() % major_vector.size();
b77d0162 (Gian            2024-10-25 13:36:42 -0400 215)         for(int j = 0; j < (int)course_vector.size(); j++) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 216)             string tempTitle = course_vector[j].abbrv + " " + to_string(course_vector[j].num);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 217)             if(tempTitle == major_vector[i]) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 218)                 vector<vector<string> > temppre(5, vector<string>(5, "NULL"));
b77d0162 (Gian            2024-10-25 13:36:42 -0400 219)                 if(get_prereqs(course_vector[j], temppre)) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 220)                     if(check_prereqs(taken_set, temppre)) {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 221)                         //cout << "scheduled: " << tempTitle << endl;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 222)                         needed.push_back(tempTitle);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 223)                         major_vector.erase(major_vector.begin()+i);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 224)                         t += course_vector[j].hours;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 225)                     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 226)                     else {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 227)                         //cout << "did not schedule: " << tempTitle << endl;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 228)                         major_vector.erase(major_vector.begin()+i);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 229)                     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 230)                 }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 231)                 else {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 232)                     //cout << "scheduled: " << tempTitle << endl;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 233)                     needed.push_back(tempTitle);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 234)                     major_vector.erase(major_vector.begin()+i);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 235)                     t += course_vector[j].hours;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 236)                 }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 237)                 break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 238)             }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 239)         }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 240)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 241) }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 242) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 243) bool get_prereqs(course c, vector<vector<string> > &temppre) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 244)     string cc = c.pre_req;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 245)     string ccc = "";
b77d0162 (Gian            2024-10-25 13:36:42 -0400 246)     int loc = 0;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 247)     int locloc = 0;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 248)     int pushedback = 0;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 249)     for(int i = 0; i < cc.size(); i++) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 250)         if(cc[i] == '&' || cc[i] == '|') {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 251)             if(cc[i] == '&') { temppre[loc][locloc] = ccc; loc++; locloc = 0; pushedback++; }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 252)             else { temppre[loc][locloc] = ccc; locloc++; pushedback++; }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 253)             ccc.clear();
b77d0162 (Gian            2024-10-25 13:36:42 -0400 254)         }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 255)         if(cc[i] != '&' && cc[i] != '|') {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 256)             ccc.push_back(cc[i]);
b77d0162 (Gian            2024-10-25 13:36:42 -0400 257)         }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 258)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 259)     temppre[loc][locloc] = ccc;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 260)     if(ccc != "none") { pushedback++; }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 261)     else { temppre[loc][locloc] = "NULL"; }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 262)     if(pushedback > 0) { return true; }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 263)     else { return false; }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 264) }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 265) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 266) bool check_prereqs(set<string> taken_set, vector<vector<string> > temppre) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 267)     int needed = 0;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 268)     for(int i = 0; i < temppre.size(); i++) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 269)         if(temppre[i][0] != "NULL") {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 270)             needed++;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 271)         }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 272)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 273)     for(int i = 0; i < temppre.size(); i++) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 274)         for(int j = 0; j < temppre[i].size(); j++) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 275)             if(taken_set.find(temppre[i][j]) != taken_set.end()) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 276)                 needed--;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 277)                 break;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 278)             }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 279)         }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 280)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 281)     if(needed == 0) { return true; }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 282)     else { return false; }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 283) }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 284) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 285) int get_flag(string s) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400 286)     if(s == "time") { return 1; }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 287)     if(s == "location") { return 2; }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 288)     return 0;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 876) };
da46a7cf (Gian            2024-10-28 00:36:19 -0400 877) 
da46a7cf (Gian            2024-10-28 00:36:19 -0400 878) int schedule_next_courses(vector<course> &next_courses, vector<string> &needed, vector<course> &course_vector) {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 879)     int scheduled = 0;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 880)     vector<vector<course> > twodvec;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 881)     twodvec.resize(needed.size());
da46a7cf (Gian            2024-10-28 00:36:19 -0400 882)     for(int i = 0; i < needed.size(); i++) {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 883)         for(int j = 0; j < course_vector.size(); j++) {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 884)             if(needed[i] == (course_vector[j].abbrv + " " + to_string(course_vector[j].num))) {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 885)                 twodvec[i].push_back(course_vector[j]);
da46a7cf (Gian            2024-10-28 00:36:19 -0400 886)             }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 887)         }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 888)     }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 889) 
da46a7cf (Gian            2024-10-28 00:36:19 -0400 890)     sort(twodvec.begin(), twodvec.end(), [](const std::vector<course>& a, const std::vector<course>& b) { return a.size() < b.size(); });
da46a7cf (Gian            2024-10-28 00:36:19 -0400 891) 
da46a7cf (Gian            2024-10-28 00:36:19 -0400 892)     for(int i = 0; i < twodvec.size(); i++) {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 893)         if(i == 0) { next_courses.push_back(twodvec[i][0]); scheduled++; }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 894)         else {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 895)             for(int j = 0; j < twodvec[i].size(); j++) {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 896)                 bool canschedule = true;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 897)                 for(int k = 0; k < next_courses.size(); k++) {
eae114ed (Gian            2024-10-31 08:55:24 -0400 898)                     if((next_courses[k].lec_time == twodvec[i][j].lec_time && twodvec[i][j].lec_time != "none") || (next_courses[k].lab_time == twodvec[i][j].lab_time && twodvec[i][j].lab_time != "none") || (next_courses[k].lec_time == twodvec[i][j].lab_time && twodvec[i][j].lab_time != "none") || (next_courses[k].lab_time == twodvec[i][j].lec_time && twodvec[i][j].lec_time != "none")) {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 899)                         canschedule = false;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 900)                     }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 901)                 }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 902)                 if(canschedule) {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 903)                     next_courses.push_back(twodvec[i][j]);
da46a7cf (Gian            2024-10-28 00:36:19 -0400 904)                     scheduled++;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 905)                     break;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 906)                 }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 907)             }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 908)         }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 909)     }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 910)     return scheduled;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 911) }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 912) 
da46a7cf (Gian            2024-10-28 00:36:19 -0400 913) bool course::operator==(course rhs) {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 914)     bool same = true;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 915)     if(abbrv != rhs.abbrv) { same = false; }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 916)     if(num != rhs.num) { same = false; }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 917)     if(lec_time != rhs.lec_time) { same = false; }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 918)     if(lec_loc != rhs.lec_loc) { same = false; }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 919)     if(lab_time != rhs.lab_time) { same = false; }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 920)     if(lab_loc != rhs.lab_loc) { same = false; }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 921)     return same;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 922) }

cgen.cpp:
b77d0162 (Gian            2024-10-25 13:36:42 -0400   1) #include "Support.h"
b77d0162 (Gian            2024-10-25 13:36:42 -0400   2) using namespace std;
b77d0162 (Gian            2024-10-25 13:36:42 -0400   3) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  13) int main(int argc, char** argv) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400  14)     // argument checking
b77d0162 (Gian            2024-10-25 13:36:42 -0400  15)     if(error_check(argv[0], argc, 5)) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400  16)         return 1;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  17)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400  18) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  19)     int flag = get_flag(argv[argc-1]);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  20) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  21)     // files streams
b77d0162 (Gian            2024-10-25 13:36:42 -0400  22)     ifstream file; 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  23) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  24)     // open the available_courses file and error check opening
b77d0162 (Gian            2024-10-25 13:36:42 -0400  25)     if(open_file(argv[1], file, argv[0])) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400  26)         return 1;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  27)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400  28) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  29)     // make vector that can hold class type course
b77d0162 (Gian            2024-10-25 13:36:42 -0400  30)     vector<course> course_vector;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  31)     if(read_file(file, course_vector)) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400  32)         return 1;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  33)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400  34) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  35)     // open the major_courses file and error check opening
b77d0162 (Gian            2024-10-25 13:36:42 -0400  36)     if(open_file(argv[2], file, argv[0])) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400  37)         return 1;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  38)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400  39) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  40)     // reads from the major courses into a vector that holds the strings
b77d0162 (Gian            2024-10-25 13:36:42 -0400  41)     vector<string> major_vector;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  42)     read_file2(major_vector, file);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  43) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  44)     // open the taken_courses file and error check opening
b77d0162 (Gian            2024-10-25 13:36:42 -0400  45)     if(open_file(argv[3], file, argv[0])) {
b77d0162 (Gian            2024-10-25 13:36:42 -0400  46)         return 1;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  47)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400  48) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  49)     // reads from the taken_courses file and saves them to a vector
b77d0162 (Gian            2024-10-25 13:36:42 -0400  50)     vector<string> taken_vector;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  51)     read_file2(taken_vector, file);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  52) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  53)     // expands the taken_courses vector to include all the pre reqs that are needed to get to a class in the taken_courses vector
b77d0162 (Gian            2024-10-25 13:36:42 -0400  54)     expand_vector(taken_vector, course_vector);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  55) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  56)     // create a set so duplicates are removed and classes are sorted alphabetically
b77d0162 (Gian            2024-10-25 13:36:42 -0400  57)     set<string> taken_set;
b77d0162 (Gian            2024-10-25 13:36:42 -0400  58)     remove_duplicates(taken_set, taken_vector, major_vector);
b77d0162 (Gian            2024-10-25 13:36:42 -0400  59) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400  98) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 101)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 102) 
b77d0162 (Gian            2024-10-25 13:36:42 -0400 104)         vector<vector<float> > distance_vector;
b77d0162 (Gian            2024-10-25 13:36:42 -0400 105)         calc_distance(distance_vector);
da46a7cf (Gian            2024-10-28 00:36:19 -0400 106)         bool running = true;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 107) 
da46a7cf (Gian            2024-10-28 00:36:19 -0400 108)         while(running) {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 109)             vector<string> needed;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 110)             find_next_courses(needed, course_vector, taken_set, major_vector, distance_vector, argv[1], 12);
da46a7cf (Gian            2024-10-28 00:36:19 -0400 111) 
da46a7cf (Gian            2024-10-28 00:36:19 -0400 112)             vector<course> next_courses;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 113)             if(schedule_next_courses(next_courses, needed, course_vector) == needed.size()) {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 114)                 for(int i = 0; i < next_courses.size(); i++) {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 115)                     for(int j = 0; j < course_vector.size(); j++) {
da46a7cf (Gian            2024-10-28 00:36:19 -0400 116)                         if(next_courses[i] == course_vector[j]) {
ce177086 (Gian            2024-10-31 09:18:57 -0400 117)                             cout << j+1 << endl;
a7f1ac87 (Gian            2024-10-29 11:37:21 -0400 118)                             break;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 119)                         }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 120)                     }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 121)                 }
26ba1c38 (Gian            2024-10-29 11:12:38 -0400 122)                 // for(int i = 0; i < next_courses.size(); i++) {
26ba1c38 (Gian            2024-10-29 11:12:38 -0400 123)                 //     cout << next_courses[i].abbrv + " " + to_string(next_courses[i].num) << " @ " << next_courses[i].lec_time << endl;
26ba1c38 (Gian            2024-10-29 11:12:38 -0400 124)                 // }
da46a7cf (Gian            2024-10-28 00:36:19 -0400 125)                 running = false;
da46a7cf (Gian            2024-10-28 00:36:19 -0400 126)             }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 127)         }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 128)     }
b77d0162 (Gian            2024-10-25 13:36:42 -0400 129) }